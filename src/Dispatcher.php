<?php

namespace Mix\Concurrent;

use Mix\Core\BaseObject;
use Mix\Core\Channel;

/**
 * Class Dispatcher
 * @package Mix\Concurrent
 * @author LIUJIAN <coder.keda@gmail.com>
 */
class Dispatcher extends BaseObject
{

    /**
     * @var \Swoole\Coroutine\Channel
     */
    public $jobQueue;

    /**
     * 最大工人数
     * @var int
     */
    public $maxWorkers;

    /**
     * 工作池
     * 内部数据的是Channel
     * @var \Swoole\Coroutine\Channel
     */
    public $workerPool;

    /**
     * 工作者集合
     * @var array
     */
    public $workers = [];

    /**
     * 退出
     * @var \Swoole\Coroutine\Channel
     */
    protected $_quit;

    /**
     * 初始化事件
     */
    public function onInitialize()
    {
        parent::onInitialize(); // TODO: Change the autogenerated stub
        // 初始化
        if (!isset($this->workerPool)) {
            $this->workerPool = new Channel($this->maxWorkers);
        }
        $this->_quit = new Channel();
    }

    /**
     * 启动
     */
    public function start()
    {
        for ($i = 0; $i < $this->maxWorkers; $i++) {
            $worker          = new Worker([
                'workerPool' => $this->workerPool,
            ]);
            $this->workers[] = $worker;
            $worker->start();
        }
        $this->dispatch();
    }

    /**
     * 派遣
     */
    public function dispatch()
    {
        tgo(function () {
            while (true) {
                $job = $this->jobQueue->pop();
                if (!$job) {
                    return;
                }
                $jobChannel = $this->workerPool->pop();
                $jobChannel->push($job);
            }
        });
        tgo(function () {
            $this->_quit->pop();
            foreach ($this->workers as $worker) {
                $worker->stop();
            }
            $this->jobQueue->close();
        });
    }

    /**
     * 停止
     */
    public function stop()
    {
        tgo(function () {
            $this->_quit->push('ok');
        });
    }

}
